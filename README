This is a small memory leak tracer for C programs. It is much faster than the
heap checker built into glibc or tcmalloc, 5-8x faster typically. It will not
detect any other type of malloc errors besides memory leaks, so this won't
help you if you have other memory issues.

It uses libunwind to retrieve stack traces for each allocation. Stack traces
are prepended to the malloc'd memory blocks, to avoid needing a separate data
structure to track alloc'd and free'd stack traces. This obviously increases
the amount of memory being used by the application, but it's overall
insignificant. Storing this way also allows the tracer to stash its info
without requiring use of any mutexes in threaded code.

Output is generated by an atexit() handler, so your program must exit cleanly
in order to get any results. The output is a binary file containing a list of
all of the unfreed blocks and the stack trace where they were allocated. The
mdump tool is provided for reading this data and generating a text report of
the leaks.

To use the tracer:
	make
	cp mleak.so mdump /tmp
	LD_PRELOAD=/tmp/mleak.so my_buggy_program
	/tmp/mdump my_buggy_program ml.*

 -- Howard Chu 2015-03-24

